# load required packages, settings, working directory =============================================
library(dlm)
library(viridis)
library(here)
setwd(here())
# create brood table ===============================================================================
Esc <- read.csv('DATA/Data_report_tables/Table_3_Expanded_estimates.csv')[,2];Esc <- Esc[!is.na(Esc)]
Har <- read.csv('DATA/Data_report_tables/Table_4_harvest.csv')[,2] # removed commas from some entries in csv file before reading
Age<-read.csv("DATA/derived_age_comps.csv")
brood <- matrix(NA,72,8)
colnames(brood) <- c("year",
"spawners",
"tot_returns",
"age3_returns",
"age4_returns",
"age5_returns",
"age6_returns",
"recruits")
brood[,1]<- Age$year # brood year
brood[,2]<- Esc # spawners
brood[,3]<- Esc+Har # returns
brood[,4]<- brood[,3]* Age[,2]  # age 3 returns
brood[,5]<- brood[,3]* Age[,3] # age 4 returns
brood[,6]<- brood[,3]* Age[,4] # age 5 returns
brood[,7]<- brood[,3]* Age[,5] # age 6 returns
for(i in 1:66){
brood[i,8] <- brood[i+3,4] + brood[i+4,5] + brood[i+5,6] + brood[i+6,7]
}
btf <- as.data.frame(brood[complete.cases(brood), ]) # drop incomplete brood years
# pre process for DLM ===============================================================================
recr <-R/mean(R)
Tssb		<-S/mean(S)
recr		<-btf$recruits/10000
Tssb		<-btf$spawners/10000
BY <- btf$year
lnRS	<-log(btf$recruits/btf$spawners)
alpha		<-NULL
beta		<-NULL
plotIn	<-lnRS[-length(lnRS)]
#==spawner recruit data
mod 		<- dlmModReg(Tssb) # this specifies a linear model
#==this sets up output for models that consider all potential formulations of the variance structure
lls 		<- numeric(4)
dlm_out <- list()
AICc    <-rep(0,4)
#==this determines the number of parameters used in the AICc calculation
dlmPars	<-c(3,4,4,5)
#==
for(i in 1:4)
{
#==this changes the variance structure for the linear regression model built above
build_mod <- function(parm)
{
mod$V <- exp(parm[1])
if(i==2){mod$W[1,1]=exp(parm[2]); mod$W[2,2]=0}
if(i==3){mod$W[1,1]=0; mod$W[2,2]=exp(parm[2])}
if(i==4){mod$W[1,1]=exp(parm[2]); mod$W[2,2]=exp(parm[3])}
return(mod)
}
#==this does maximum likelihood optimization of the variance
dlm_out[[i]] <- dlmMLE(y=lnRS, build=build_mod, parm=c(-.1,-.1,-.1), method="Nelder-Mead")
lls[i] 	 <- dlm_out[[i]]$value
#==specifies the model based on
dlmMod	<-build_mod(dlm_out[[i]]$par)
#==applies Kalman filter
outsFilter	<-dlmFilter(y=lnRS,mod=dlmMod)
filtered	<-outsFilter$m[-1,1]+Tssb*outsFilter$m[-1,2] # estimated log(r/s)
#==backward recurvise smoothing
outsSmooth	<-dlmSmooth(outsFilter)
smoothed	<-outsSmooth$s[-1,1]+Tssb*outsSmooth$s[-1,2] # estimated log(r/s)
#==collecting the parameters
alpha 	<- cbind(alpha,outsSmooth$s[-1,1,drop=FALSE])
beta  	<- cbind(beta,outsSmooth$s[-1,2,drop=FALSE])
#==calculation of AICc for model comparison (I'm a little suspicious of this, but that's what we did)
AICc[i]	<- 2*lls[i] + 2*dlmPars[i] +(2*dlmPars[i]*(dlmPars[i]+1)/(length(recr)-dlmPars[i]-1))
}
AICc
outsSmooth
filtered
smoothed
alpha
outsSmooth
beta
outsSmooth
outsSmooth$s
outsSmooth$s[-1,2,drop=FALSE]
outsSmooth
outsSmooth
conf.tmp <- unlist(dlmSvd2var(outsSmooth$U.S, outsSmooth$D.S))
conf.tmp
conf <- ts(as.numeric(conf.tmp)[-1], start = c(1960, 2),
frequency = 4)
conf
wid <- qnorm(0.05, lower = FALSE) * sqrt(conf)
wid <- qnorm(0.05, lower = FALSE) * sqrt(conf.tmp)
conf.tmp
sqrt(conf.tmp)
dlmSvd2var(outsSmooth$U.S, outsSmooth$D.S)
conf <- ts(as.numeric(conf.tmp)[-1], start = c(1960, 2)4)
conf <- ts(as.numeric(conf.tmp)[-1], start = c(1960, 2))
conf
wid <- qnorm(0.05, lower = FALSE) * sqrt(conf)
conf.tmp <- unlist(dlmSvd2var(outsSmooth$U.S, outsSmooth$D.S))
conf <- ts(as.numeric(conf.tmp)[-1], start = c(1948, 2))
conf
conf.tmp <- unlist(dlmSvd2var(outsSmooth$U.S, outsSmooth$D.S))
conf <- ts(as.numeric(conf.tmp)[-1], start = c(1947))
conf
conf.tmp <- unlist(dlmSvd2var(outsSmooth$U.S, outsSmooth$D.S))
conf <- ts(as.numeric(conf.tmp)[-1], start = c(1947))
conf
conf.tmp
as.numeric(conf.tmp)[-1]
sqrt(as.numeric(conf.tmp)[-1])
