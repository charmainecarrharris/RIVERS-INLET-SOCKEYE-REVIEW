raw_age_comps <- read.csv('DATA/Data_report_tables/Table_6_esc_age_comp.csv')
A_comp <- matrix(NA, nrow = length(Esc), ncol = 5) # matrix to store age comps in
# years with data
A_comp[42:72,1] <- rowSums(raw_age_comps[30:60,2:3]) # combine age 2 and 3 into age 3 for years with data
A_comp[13:41,1] <- raw_age_comps[1:29,8] # assign "other" ages comps to 3 yr olds for years with data
A_comp[13:72,2] <- raw_age_comps[1:60,4] # age 4 for years with data
A_comp[13:72,3] <- raw_age_comps[1:60,5] # age 5 for years with data
A_comp[13:72,4] <- raw_age_comps[1:60,6] # age 6 for years with data, replaced nas with 0 in years with data for other age comps
# years without data
A_comp <- as.data.frame(A_comp)
comp_means <- colMeans(A_comp[30:60,],na.rm=T)
A_comp <- A_comp %>% replace_na(list(V1=comp_means[1],
V2=comp_means[2],
V3=comp_means[3],
V4=comp_means[4]))
# age comp sample sizes
A_comp[42:72,5] <- raw_age_comps$Sample.size[30:60] # assume ESS equal to true sample sizes for years with data
A_comp[1:41,5] <- 50 # assume ESS of 50 for years without age comp sample size data
# write to file in case needed elsewhere
A_comp_print <- cbind(seq(1948,2019),A_comp)
colnames(A_comp_print) <-  c("year","3_yr_olds","4_yr_olds","5_yr_olds","6_yr_olds","ESS")
write.csv(A_comp_print,
file = "DATA/derived_age_comps.csv",
row.names = F)
# age observations in integers, sum of ages by year is assumed to be equivalent to ESS
A_obs <- round(A_comp[,1:4]*A_comp[,5])
# Initialize Model Parameters ======================================================================
simdata <- data.frame(id = rep(1:nRyrs, each = 1),
x = runif(1,min=0.01, max=0.99),
y = runif(1,min=0.01, max=0.99),
z = runif(1,min=0.01, max=0.99),
zz = runif(1,min=0.01, max=0.99))
init_fn <- function(chain_id=1) {
list(
"lnR"=abs(rnorm(nRyrs, mean=0, sd=5)),
"lnalpha"=abs(rnorm(1, mean=0, sd=1)),
"beta"=runif(1, min=0.01, max=9.99),
"sigma_R"=abs(rnorm(1, mean=0, sd=1)),
"sigma_R0"=abs(rnorm(1, mean=0, sd=1)),
"phi"=runif(1, min=-1, max=1),
"lnresid_0"=runif(1, min=-1, max=1),
"mean_ln_R0"=abs(rnorm(1, mean=0, sd=1)),
"U"=runif(nyrs, min=0.01, max=0.99),
"g"=daply(simdata %>% mutate(id = as.integer(id)), "id",
function(df) df[1,c("x", "y", "z", "zz")]) %>% as.numeric %>% matrix(ncol=4)
)
}
# Initial List of Lists for Multiple Chains
init_ll <- lapply(1:4, function(id) init_fn(chain_id = id))
# Run Stan Model ===================================================================================
# data
stan.data <- list("nyrs" = nyrs,
"a_min" = a_min,
"a_max" = a_max,
"A" = A,
"nRyrs" = nyrs + A - 1,
"A_obs" = as.matrix(A_obs),
"S_obs" = Esc/100000,
"H_obs" = Har/100000,
"S_cv" = S_cv,
"H_cv" = H_cv)
# fit
stan.fit <- stan(file = "SRA/SSSR_AR1.stan",
model_name = "Rivers-SSSR-AR1",
data = stan.data,
chains = 4,
iter = 1000,
seed = 42,
init = init_ll)
knitr::opts_chunk$set(echo = FALSE, message=FALSE, cache=FALSE, include=TRUE)
options(scipen=1, digits=4)
# options(width=50, width.cutoff=50, digits = 6)
require(kintr)
require(tidyverse)
require(PBSmodelling)
require(MASS)
require(RColorBrewer)
require(stringr)
require(lubridate)
require(pander)
require(kableExtra)
require(ggthemes)
require(xlsx)
require(plotly)
require(rstan)
require(tidybayes)
require(mcmcplots)
require(mltools)
require(viridis)
# Control Section
do.traceplots <- TRUE
# Read in Model Data and Output Files
stan.fit <- readRDS(file="./output/stan.fit.rds")
stan.data <- readRDS(file="./output/stan.data.rds")
fy <- 1948 # first year of spawner observations
years <- seq(fy, (fy+stan.data$nyrs-1))
brood_yrs <- seq(fy,fy+stan.data$nyrs-4)
stan.summary <- data.frame(summary(stan.fit)$summary)
pars <- rstan::extract(stan.fit)
hist(stan.summary$n_eff,
col="red",
breaks=50,
main="",
yaxt="n",
xlab="Effective sample size")
axis(2,las=2)
box(col="grey")
hist(stan.summary$Rhat,
col="royalblue",
breaks=50,
main="",
yaxt="n",
xlab="R-hat")
axis(2,las=2)
box(col="grey")
kable(round(summary(stan.fit, pars= c("lnalpha", "lnalpha_c","beta", "sigma_R", "sigma_R0", "phi", "S_max", "S_eq_c", "S_msy_c", "S_msy_c","U_msy_c"))$summary,digits=2)[,c(1,4,6,8:10)],
align = "crr") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
knitr::opts_chunk$set(echo = FALSE, message=FALSE, cache=FALSE, include=TRUE)
options(scipen=1, digits=4)
# options(width=50, width.cutoff=50, digits = 6)
require(kintr)
require(tidyverse)
require(PBSmodelling)
require(MASS)
require(RColorBrewer)
require(stringr)
require(lubridate)
require(pander)
require(kableExtra)
require(ggthemes)
require(xlsx)
require(plotly)
require(rstan)
require(tidybayes)
require(mcmcplots)
require(mltools)
require(viridis)
# Control Section
do.traceplots <- TRUE
# Read in Model Data and Output Files
stan.fit <- readRDS(file="./output/stan.fit.rds")
stan.data <- readRDS(file="./output/stan.data.rds")
fy <- 1948 # first year of spawner observations
years <- seq(fy, (fy+stan.data$nyrs-1))
brood_yrs <- seq(fy,fy+stan.data$nyrs-4)
stan.summary <- data.frame(summary(stan.fit)$summary)
pars <- rstan::extract(stan.fit)
hist(stan.summary$n_eff,
col="red",
breaks=50,
main="",
yaxt="n",
xlab="Effective sample size")
axis(2,las=2)
box(col="grey")
hist(stan.summary$Rhat,
col="royalblue",
breaks=50,
main="",
yaxt="n",
xlab="R-hat")
axis(2,las=2)
box(col="grey")
kable(round(summary(stan.fit, pars= c("lnalpha", "lnalpha_c","beta", "sigma_R", "sigma_R0", "phi", "S_max", "S_eq_c", "S_msy_c", "S_msy_c","U_msy_c"))$summary,digits=2)[,c(1,4,6,8:10)],
align = "crr") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Extract Data
obs <- stan.data$S_obs
# Model predictions
pred <-pars$S
pred.quant <- apply(pred, 2, quantile, probs=c(0.025,0.25,0.5,0.75,0.975))
spawners <- as.data.frame(cbind(years, obs, t(pred.quant)))
colnames(spawners) <- c("year","obs","lwr","midlwr","mid","midupper","upper")
# Plot
ggplot(spawners, aes(x=year, y = mid), show.legend = F) +
geom_line(show.legend = F) +
geom_ribbon(aes(ymin = lwr, ymax = upper), show.legend = F, alpha=0.2) +
geom_ribbon(aes(ymin = midlwr, ymax = midupper), show.legend = F, alpha=0.2) +
geom_point(aes(x=years, y = obs), size=2,show.legend = F, col="royalblue") +
xlab("Year") +
ylab("Escapement (10^5) ") +
theme(legend.position = "none") +
theme_bw()
ggsave("./figures/escape-fit.jpg",height = 4.5, width = 6)
# Extract Data
obs <- stan.data$H_obs
# Model predictions
pred <-pars$C
pred.quant <- apply(pred, 2, quantile, probs=c(0.025,0.25,0.5,0.75,0.975))
spawners <- as.data.frame(cbind(years, obs, t(pred.quant)))
colnames(spawners) <- c("year","obs","lwr","midlwr","mid","midupper","upper")
# Plot
ggplot(spawners, aes(x=year, y = mid), show.legend = F) +
geom_line(show.legend = F) +
geom_ribbon(aes(ymin = lwr, ymax = upper), show.legend = F, alpha=0.2) +
geom_ribbon(aes(ymin = midlwr, ymax = midupper), show.legend = F, alpha=0.2) +
geom_point(aes(x=years, y = obs), size=2,show.legend = F, col="royalblue") +
xlab("Year") +
ylab("Harvest (10^5) ") +
theme(legend.position = "none") +
theme_bw()
ggsave("./figures/harvest-fit.jpg",height = 4.5, width = 6)
# extract Data
obs <- stan.data$A_obs/rowSums(stan.data$A_obs)
# model predictions
pred <-pars$q
pred.quant <- apply(pred, c(2,3), quantile, probs=c(0.025,0.25,0.5,0.75,0.975))
# wrangle observations and predictions into a data frame for ggplot
age_comps <- matrix(NA,(length(years)*4), 8)
colnames(age_comps) <- c("years","age_class","obs","lwr","midlwr","mid","midupper","upper")
age_comps[,1] <- rep(years,4)
age_comps[,2] <- rep(3:6,each = length(years))
age_comps[,3] <- as.vector(obs[,1:4])
age_comps[,4] <- as.vector(pred.quant[1,1:length(years),])
age_comps[,5] <- as.vector(pred.quant[2,1:length(years),])
age_comps[,6] <- as.vector(pred.quant[3,1:length(years),])
age_comps[,7] <- as.vector(pred.quant[4,1:length(years),])
age_comps[,8] <- as.vector(pred.quant[5,1:length(years),])
age_comps <- as.data.frame(age_comps)
age_comps$age_classF <- as.factor(age_comps$age_class)
# plot
ggplot(age_comps, aes(x=years, y = mid), show.legend = F) +
geom_line(show.legend = F) +
geom_ribbon(aes(ymin = lwr, ymax = upper), show.legend = F, alpha=0.2) +
geom_ribbon(aes(ymin = midlwr, ymax = midupper), show.legend = F, alpha=0.2) +
geom_point(aes(x=years, y = obs), size=2,show.legend = F, col="royalblue") +
facet_wrap(~age_classF, scales = "free_y")+
xlab("Year") +
ylab("Proportion") +
theme(legend.position = "none") +
theme_bw()
ggsave("./figures/age-comp-fit.jpg",height = 4.5, width = 6)
spwn <-pars$S
spwn.quant <- apply(spwn, 2, quantile, probs=c(0.025,0.5,0.975))[,1:(length(years)-4)]
rec <-pars$R
rec.quant <- apply(rec, 2, quantile, probs=c(0.025,0.5,0.975))[,8:dim(pars$R)[2]]
brood_t <- as.data.frame(cbind(years[1:(length(years)-4)],t(spwn.quant), t(rec.quant)))
colnames(brood_t) <- c("BroodYear","S_lwr","S_med","S_upr","R_lwr","R_med","R_upr")
brood_t <- as.data.frame(brood_t)
# SR relationship
spw <- seq(0,max(brood_t[,4]),length.out=100)
SR_pred <- matrix(NA,100,10000)
posteriors <- as.matrix(stan.fit)
for(i in 1:10000){
r <- sample(seq(1,1000),1,replace=T)
a <- pars$lnalpha_c[r]
b <- pars$beta[r]
SR_pred[,i] <- (exp(a)*spw*exp(-b*spw))
}
SR_pred <- cbind(spw,t(apply(SR_pred,c(1),quantile,probs=c(0.05,0.5,0.95),na.rm=T)))
colnames(SR_pred) <- c("Spawn", "Rec_lwr","Rec_med","Rec_upr")
SR_pred <- as.data.frame(SR_pred)
ggplot() +
geom_ribbon(data = SR_pred, aes(x = Spawn, ymin = Rec_lwr, ymax = Rec_upr),
fill = "grey80", alpha=0.5, linetype=2, colour="gray46") +
geom_line(data = SR_pred, aes(x = Spawn, y = Rec_med), color="black", size = 1) +
geom_errorbar(data = brood_t, aes(x= S_med, y = R_med, ymin = R_lwr, ymax = R_upr),
colour="grey", width=0.2, size=0.3) +
geom_errorbarh(data = brood_t, aes(x= S_med, y = R_med, xmin = S_lwr, xmax = S_upr),
height=0, colour = "grey", width=0.2, size = 0.3) +
geom_point(data = brood_t, aes(x = S_med, y = R_med, color=BroodYear, width = 0.9), size = 3)+
coord_cartesian(xlim=c(0, max(brood_t[,4])), ylim=c(0,max(brood_t[,7]))) +
scale_colour_viridis_c()+
xlab("Spawners (10^5)") +
ylab("Recruits (10^5)") +
theme_bw() +
theme(strip.text.x = element_text(size=8),
axis.title = element_text(size=10),
axis.text = element_text(size=7))+
geom_abline(intercept = 0, slope = 1,col="dark grey")
ggsave("./figures/spawn-recuit.jpg",height = 4.5, width = 6)
pred <-pars$lnalpha_y
pred.quant <- apply(pred, 2, quantile, probs=c(0.025,0.25,0.5,0.75,0.975))[,8:dim(pars$lnalpha_y)[2]]
log_prod_t <- as.data.frame(cbind(years[1:(length(years)-4)], t(pred.quant)))
colnames(log_prod_t) <- c("year","lwr","midlwr","mid","midupper","upper")
# Plot
ggplot(log_prod_t, aes(x=year, y = mid), show.legend = F) +
geom_line(show.legend = F) +
geom_ribbon(aes(ymin = lwr, ymax = upper), show.legend = F, alpha=0.2) +
geom_ribbon(aes(ymin = midlwr, ymax = midupper), show.legend = F, alpha=0.2) +
xlab("Brood year") +
ylab("Productivity (log) ") +
theme(legend.position = "none") +
theme_bw()
ggsave("./figures/time-vary-prod.jpg",height = 4.5, width = 6)
bench <- matrix(NA,10000,10000,
dimnames = list(NA,c("lower_bm","upper_bm","recent_abund","recent_er")))
bench <- matrix(NA,10000,4,
dimnames = list(NA,c("lower_bm","upper_bm","recent_abund","recent_er")))
bench <- matrix(NA,10000,4,
dimnames = list(seq(1:10000),c("lower_bm","upper_bm","recent_abund","recent_er")))
pars$S
dim(pars$S)
dim(pars$S)[2]
r = 2
pars$S[r,(dim(pars$S)[2]-5:dim(pars$S)[2])]
(dim(pars$S)[2]-5:dim(pars$S)[2])
dim(pars$S)[2]
dim(pars$S)[2]-5
pars$S[r,67:72]
years
length(years)
length(years)-6
pars$S[r,(length(years)-6):length(years)]
mean(pars$U[r,(length(years)-6):length(years)])
bench <- matrix(NA,10000,4,
dimnames = list(seq(1:10000),c("lower_bm","upper_bm","recent_abund","recent_er")))
posteriors <- as.matrix(stan.fit)
for(i in 1:10000){
r <- sample(seq(1,1000),1,replace=T)
a <- pars$lnalpha_c[r]
b <- pars$beta[r]
bench[,2] <- 0.8*pars$S_msy[r]
bench[,3] <- mean(pars$S[r,(length(years)-6):length(years)])
bench[,4] <- mean(pars$U[r,(length(years)-6):length(years)])
}
bench
"NLL_Sgen1" <- function(estSgen,aa,b,Smsy){	#minimize this function to get stock size that can recover to Smsy in one generation
pSmsy=estSgen*exp(aa-b*estSgen)
NLL=(log(pSmsy)-log(Smsy))^2
return(NLL)
}
#Estimate Sgen1, which is stock size that allows recovery to Smsy in one generation
init=pars$S_msy[r]
init
a <- pars$lnalpha_c[r]
b <- pars$beta[r]
smsy <- pars$S_msy[r]
fit=optim(par=(smsy*0.5),fn=NLL_Sgen1,aa=a ,b=b,Smsy=smsy,method="L-BFGS-B",hessian=F,lower=1,upper=smsy,control=list(fnscale=1))	#500
fit
S_msy
smsy
fit$par
for(i in 1:10000){
r <- sample(seq(1,1000),1,replace=T)
a <- pars$lnalpha_c[r]
b <- pars$beta[r]
smsy <- pars$S_msy[r]
fit=optim(par=(smsy*0.5),
fn=NLL_Sgen1,
aa=a ,
b=b,
Smsy=smsy,
method="L-BFGS-B",
hessian=F,
lower=1,
upper=smsy,
control=list(fnscale=1))
bench[r,1] <- fit$par
bench[r,2] <- 0.8*smsy
bench[r,3] <- mean(pars$S[r,(length(years)-6):length(years)])
bench[r,4] <- mean(pars$U[r,(length(years)-6):length(years)])
}
bench
hist(bench[,1])
hist(bench[,1],xlim=c(0,20))
hist(bench[,1],xlim=c(0,20), breaks=2000)
bench[r,2]
hist(bench[,2],xlim=c(0,20), breaks=2000)
smsy <- pars$S_msy[r]
smsy
fit$par
0.8*smsy
bench[,2]
hist(bench[,2],xlim=c(0,20), breaks=200)
hist(bench[,2],xlim=c(0,20), breaks=1000)
hist(bench[,2],xlim=c(0,20))
hist(bench[,2],xlim=c(0,200))
bench <- matrix(NA,10000,7,
dimnames = list(seq(1:10000),c("lower_bm","upper_bm","recent_abund","recent_er","red","amber","green")))
posteriors <- as.matrix(stan.fit)
for(i in 1:10000){
r <- sample(seq(1,1000),1,replace=T)
a <- pars$lnalpha_c[r]
b <- pars$beta[r]
smsy <- pars$S_msy[r]
fit=optim(par=(smsy*0.5),
fn=NLL_Sgen1,
aa=a ,
b=b,
Smsy=smsy,
method="L-BFGS-B",
hessian=F,
lower=1,
upper=smsy,
control=list(fnscale=1))
bench[r,1] <- fit$par
bench[r,2] <- 0.8*smsy
bench[r,3] <- mean(pars$S[r,(length(years)-6):length(years)])
bench[r,4] <- mean(pars$U[r,(length(years)-6):length(years)])
if(bench[r,3]>= bench[r,2]){bench[r,7] <- 1}
else{
if(bench[r,3]< bench[r,1]){bench[r,5] <- 1}
else{bench[r,6] <- 1}
}
}
bench
median(bench[,3])
median(bench[,3],na.rm=T)
median(bench[,1],na.rm=T)
median(bench[,2],na.rm=T)
# Benchmarks
bench <- matrix(NA,10000,7,
dimnames = list(seq(1:10000),c("lower_bm","upper_bm","recent_abund","recent_er","red","amber","green")))
posteriors <- as.matrix(stan.fit)
for(i in 1:10000){
r <- sample(seq(1,1000),1,replace=T)
a <- pars$lnalpha_c[r]
b <- pars$beta[r]
smsy <- pars$S_msy[r]
fit=optim(par=(smsy*0.5),
fn=NLL_Sgen1,
aa=a ,
b=b,
Smsy=smsy,
method="L-BFGS-B",
hessian=F,
lower=1,
upper=smsy,
control=list(fnscale=1))
bench[r,1] <- fit$par
bench[r,2] <- 0.8*smsy
bench[r,3] <- mean(pars$S[r,(length(years)-6):length(years)])
bench[r,4] <- mean(pars$U[r,(length(years)-6):length(years)])
bench[r,5:7] <- 0
if(bench[r,3]>= bench[r,2]){bench[r,7] <- 1}
else{
if(bench[r,3]< bench[r,1]){bench[r,5] <- 1}
else{bench[r,6] <- 1}
}
}
bench.quant <- apply(bench, 2, quantile, probs=c(0.025,0.25,0.5,0.75,0.975))
bench.quant <- apply(bench, 2, quantile, probs=c(0.025,0.25,0.5,0.75,0.975), na.rm=T)
bench.quant
bench[,6]/10000
sum(bench[,6])/10000
sum(bench[,6])
sum(bench[,6],na.rm)/10000
sum(bench[,6],na.rm=T)/10000
sum(bench[,5],na.rm=T)/10000
bench[,5
]
# Benchmarks
bench <- matrix(NA,10000,7,
dimnames = list(seq(1:10000),c("lower_bm","upper_bm","recent_abund","recent_er","red","amber","green")))
posteriors <- as.matrix(stan.fit)
for(i in 1:10000){
r <- sample(seq(1,1000),1,replace=T)
a <- pars$lnalpha_c[r]
b <- pars$beta[r]
smsy <- pars$S_msy[r]
fit=optim(par=(smsy*0.5),
fn=NLL_Sgen1,
aa=a ,
b=b,
Smsy=smsy,
method="L-BFGS-B",
hessian=F,
lower=1,
upper=smsy,
control=list(fnscale=1))
bench[i,1] <- fit$par
bench[i,2] <- 0.8*smsy
bench[i,3] <- mean(pars$S[r,(length(years)-6):length(years)])
bench[i,4] <- mean(pars$U[r,(length(years)-6):length(years)])
bench[i,5:7] <- 0
if(bench[i,3]>= bench[i,2]){bench[i,7] <- 1}
else{
if(bench[i,3]< bench[i,1]){bench[i,5] <- 1}
else{bench[i,6] <- 1}
}
}
bench.quant <- apply(bench, 2, quantile, probs=c(0.025,0.25,0.5,0.75,0.975), na.rm=T)
sum(bench[,6],na.rm=T)/10000
sum(bench[,5],na.rm=T)/10000
sum(bench[,5],na.rm=T)/10000
sum(bench[,6],na.rm=T)/10000
sum(bench[,7],na.rm=T)/10000
bench.quant
pars$lnalpha_c[r]+pars$lnresid[r]
pars$lnresid
a <- pars$lnalpha_c[r]+pars$lnresid[r,(7-35):72]
(7-35):72
a <- pars$lnalpha_c[r]+pars$lnresid[r,(72-35):72]
a
a <- median(pars$lnalpha_c[r]+pars$lnresid[r,(72-35):72])
a
recent_smsy <- matrix(NA,10000)
for(i in 1:10000){
r <- sample(seq(1,1000),1,replace=T)
a <- median(pars$lnalpha_c[r]+pars$lnresid[r,(72-35):72])
b <- pars$beta[r]
smsy[i] <-
S_max <- 1/b;
S_eq <- a * S_max;
S_msy[i] = S_eq * (0.5 - 0.07 * a);
}
# recent Smsy (last 35 years)
recent_smsy <- matrix(NA,10000)
for(i in 1:10000){
r <- sample(seq(1,1000),1,replace=T)
a <- median(pars$lnalpha_c[r]+pars$lnresid[r,(72-35):72])
b <- pars$beta[r]
smsy[i] <-
S_max <- 1/b;
S_eq <- a * S_max;
recent_smsy[i] = S_eq * (0.5 - 0.07 * a);
}
recent_smsy
apply(recent_smsy, 2, quantile, probs=c(0.025,0.25,0.5,0.75,0.975), na.rm=T)
bench.quant
